import sys
sys.path.append('/usr/lib/python2.7/dist-packages')
import cv2
import numpy as np
from matplotlib import pyplot as plt
'''from sfm import *'''
import sys
import argparse




# Configuration parameters are taken as command line arguments
# Parsing arguments

# Image 1 name
image_1_name = sys.argv[1]

# Image 2 name
image_2_name = sys.argv[2]

# Method used for finding corresponding points
# 1. sift
# 2. manual
# 3. affine
method = sys.argv[3]

count1 = 1
count2 = 1
 

# Mouse Callback used to select corresponding points
def draw_circle(event,x,y,flags,param):
    global img1,img2, count1, count2, pts1, pts2
    if event == cv2.EVENT_LBUTTONDBLCLK:
        if param==1:
            cv2.putText(img1,str(count1),(x,y),cv2.FONT_HERSHEY_SIMPLEX, 1,(0,0,0),2)
            count1 +=1
            pts1.append((x,y))
        elif param==2:
            cv2.putText(img2,str(count2),(x,y),cv2.FONT_HERSHEY_SIMPLEX, 1,(0,0,0),2)
            count2 +=1
            pts2.append((x,y))

        print x,y


img1orig = cv2.imread(image_1_name)  #queryimage # left image
img2orig = cv2.imread(image_2_name) #trainimage # right image

# Resizing both the images
img1 = cv2.resize(img1orig, (700,700))
img2 = cv2.resize(img2orig, (700,700))

def save_points(pts1, pts2, filename1, filename2):
    np.save(filename1, pts1)
    np.save(filename2, pts2)

def load_points(filename1, filename2):
    pts1 = np.load(filename1)
    pts2 = np.load(filename2)
    return pts1, pts2


def set_of_parallel_lines(homo_points):
	lines=np.zeros((homo_points.shape[0]/2,3))
	for i in range(homo_points.shape[0]/2):
		temp=homo_points[2*i:2*i+2,:]
		lines[i,:]=np.cross(temp[0],temp[1])

	return lines
def calculate_vanishining_line(lines):
	vanishing_points=np.zeros((lines.shape[0]/2,3))
	
	for i in range(lines.shape[0]/2):
		temp=lines[2*i:2*i+2,:]
		#print temp
		vanishing_points[i,:]=np.cross(temp[0,:],temp[1,:])
        print vanishing_points
	for i in range(vanishing_points.shape[0]):
		vanishing_points[i,:]=vanishing_points[i,:]/vanishing_points[i,-1]
	vanishing_line= np.cross(vanishing_points[0,:],vanishing_points[1,:])
        print vanishing_line
	return vanishing_line


good = []
pts1 = []
pts2 = []
pts3 = np.zeros((4,3)) 
pts4 = np.zeros((2,3)) 
van1 = np.zeros((1,3)) 
van2 = np.zeros((1,3))
affine1 = np.zeros((3,3))
affine2 = np.zeros((3,3))
I = np.zeros((3,3))
check1 = np.zeros((3,3))
check2 = np.zeros((3,3))



#----------------------------------------#
# Findiing corresponding points
#----------------------------------------#

# Method 1: Using SIFT

if (method=="sift"):

    sift = cv2.SIFT()

    # find the keypoints and descriptors with SIFT
    kp1, des1 = sift.detectAndCompute(img1,None)
    kp2, des2 = sift.detectAndCompute(img2,None)

    # FLANN parameters
    FLANN_INDEX_KDTREE = 0
    index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
    search_params = dict(checks=50)

    flann = cv2.FlannBasedMatcher(index_params,search_params)
    matches = flann.knnMatch(des1,des2,k=2)

    # ratio test as per Lowe's paper
    for i,(m,n) in enumerate(matches):
        if m.distance < 0.8*n.distance:
            good.append(m)
            pts2.append(kp2[m.trainIdx].pt)
            pts1.append(kp1[m.queryIdx].pt)

    # We select only inlier points
    # pts1 = pts1[mask.ravel()==1]
    # pts2 = pts2[mask.ravel()==1]
    pts1 = np.float32(pts1)
    pts2 = np.float32(pts2)

    # Calculate Homography
    h, status = cv2.findHomography(pts1, pts2)
    print "Homography matrix for sift is\n",h

    # Warp source image to destination based on homography
    im_out = cv2.warpPerspective(img1, h, (img2.shape[1],img2.shape[0]))
	     
    # Display images
    cv2.imshow("Source Image", img1)
    cv2.imshow("Destination Image", img2)
    cv2.imshow("Warped Source Image", im_out)
    cv2.imwrite('sift_warped_image.jpg',im_out)
    img3= im_out-img2
    cv2.imshow("Difference image", img3)
    cv2.imwrite('sift_difference_image.jpg',img3)
    cv2.waitKey(0)

# Method 2: Using manual selection

elif (method=="manual"):

    # Display both the images to manually select the corresponding points in them
    cv2.namedWindow('First Image')
    cv2.setMouseCallback('First Image',draw_circle,param=1)
    cv2.namedWindow('Second Image')
    cv2.setMouseCallback('Second Image',draw_circle,param=2)

    #press escape after selecting 4 points and their corresponding points in both images
    while(1):
        cv2.imshow('Second Image',img2)
        cv2.imshow('First Image',img1)
        if cv2.waitKey(20) & 0xFF == 27:
            break

    cv2.destroyAllWindows()

    save_points(pts1, pts2, "pts1","pts2")
    pts1 = np.float32(pts1)
    pts2 = np.float32(pts2)

    # Calculate Homography
    h, status = cv2.findHomography(pts1, pts2)
    print "Homography matrix for manual tagging is\n",h

    # Warp source image to destination based on homography
    im_out = cv2.warpPerspective(img1, h, (img2.shape[1],img2.shape[0]))
	     
    # Display images
    cv2.imshow("Source Image", img1)
    cv2.imshow("Destination Image", img2)
    cv2.imshow("Warped Source Image", im_out)
    cv2.imwrite('Manual_tagging_warped_image.jpg',im_out)
    img3= im_out-img2
    cv2.imshow("Difference image", img3)
    cv2.imwrite('Manual_tagging_difference_image.jpg',img3)
    cv2.waitKey(0)

elif (method=="affine"):

    # Display both the images to manually select the corresponding points in them
    cv2.namedWindow('First Image')
    cv2.setMouseCallback('First Image',draw_circle,param=1)
    cv2.namedWindow('Second Image')
    cv2.setMouseCallback('Second Image',draw_circle,param=2)

    #press escape after selecting 4 points and their corresponding points in both images
    while(1):
        cv2.imshow('Second Image',img2)
        cv2.imshow('First Image',img1)
        if cv2.waitKey(20) & 0xFF == 27:
            break

    cv2.destroyAllWindows()

    save_points(pts1, pts2, "pts1","pts2")
    pts1 = np.float32(pts1)
    pts2 = np.float32(pts2)

    pts1=np.append(pts1,[[1],[1],[1],[1],[1],[1],[1],[1]],axis=1)
    pts2=np.append(pts2,[[1],[1],[1],[1],[1],[1],[1],[1]],axis=1)


    """ pts3[0]=np.cross(pts1[0],pts1[1])
    pts3[1]=np.cross(pts1[1],pts1[2])
    pts3[2]=np.cross(pts1[2],pts1[3])
    pts3[3]=np.cross(pts1[3],pts1[0])
    pts4[0]=np.cross(pts3[0],pts3[2])
    pts4[1]=np.cross(pts3[1],pts3[3])

    print "Vanishing points for the first image are \n",pts4
    van1=np.cross(pts4[0],pts4[1])
    print "Vanishing line for the first image is \n",van1

    affine1 = [[1,0,0],[0,1,0],[van1[0],van1[1],van1[2]]]

    I = [[1,0,-10],[0,1,-10],[0,0,1]]

    Ha1=np.dot(I, affine1)
    print "Affine rectification matrix for first image is \n",Ha1
    im_out1 = cv2.warpPerspective(img1, Ha1, (img1.shape[1],img1.shape[0]))
	     
     pts3[0]=np.cross(pts2[0],pts2[1])
    pts3[1]=np.cross(pts2[4],pts2[5])
    pts3[2]=np.cross(pts2[2],pts2[3])
    pts3[3]=np.cross(pts2[7],pts2[6])
    pts4[0]=np.cross(pts3[0],pts3[2])
    pts4[1]=np.cross(pts3[1],pts3[3])
    print "Vanishing points for the second image are \n",pts4
    van2=np.cross(pts4[0],pts4[1])
    print "Vanishing line for the second image is \n",van2
    affine2 = [[1,0,0],[0,1,0],[van2[0],van2[1],van2[2]]]

    Ha2=np.dot(I, affine2)
    print "Affine rectification matrix for second image is \n",Ha2
    im_out2 = cv2.warpPerspective(img2, Ha2, (img2.shape[1],img2.shape[0]))

    # Display images
    cv2.imshow("Affine rectification of first image", im_out1)	
    cv2.imwrite('Affine_rectified_first_image.jpg',im_out1)     
    cv2.imshow("Affine rectification of second image", im_out2)
    cv2.imwrite('Affine_rectified_second_image.jpg',im_out2)     
    cv2.waitKey(0)
    """
    #calculating affine rectification for first image
    lines=set_of_parallel_lines(pts1)
    print "vanishing points and lines for first image are "
    vanishing_line=calculate_vanishining_line(lines)
    vanishing_line=vanishing_line.astype(float)/float(vanishing_line[-1])
    HA=np.array([[1,0,-10],[0,1,-10],[0,0,1]])
    d=np.array([[1,0,0],[0,1,0],[vanishing_line[0],vanishing_line[1],vanishing_line[2]]])
    H=HA.dot(d)
    im_out1=cv2.warpPerspective(img1, H, (img1.shape[1],img1.shape[0])
    print "\n"

    #calculating affine rectification for second image
    lines=set_of_parallel_lines(pts2)
    print "vanishing points and lines for second image are "
    vanishing_line=calculate_vanishining_line(lines)
    vanishing_line=vanishing_line.astype(float)/float(vanishing_line[-1])
    HA=np.array([[1,0,-10],[0,1,-10],[0,0,1]])
    d=np.array([[1,0,0],[0,1,0],[vanishing_line[0],vanishing_line[1],vanishing_line[2]]])
    H=HA.dot(d)
    im_out2=cv2.warpPerspective(img2, H, (img2.shape[1],img2.shape[0]))
    print "\n"

    cv2.imshow("Affine rectification of first image", im_out1)
    cv2.imwrite('Affine_rectified_first_image.jpg',im_out1) 
    cv2.imshow("Affine rectification of second image", im_out2)
    cv2.imwrite('Affine_rectified_second_image.jpg',im_out2) 
    cv2.waitKey(0)









