import numpy as np
import cv2

def drawMatches(img1, kp1, img2, kp2, matches):

    # Create a new output image that concatenates the two images together
    # (a.k.a) a montage
    rows1 = img1.shape[0]
    cols1 = img1.shape[1]
    rows2 = img2.shape[0]
    cols2 = img2.shape[1]

    out = np.zeros((max([rows1,rows2]),cols1+cols2,3), dtype='uint8')

    # Place the first image to the left
    out[:rows1,:cols1] = np.dstack([img1, img1, img1])

    # Place the next image to the right of it
    out[:rows2,cols1:] = np.dstack([img2, img2, img2])
	

    # For each pair of points we have between both images
    # draw circles, then connect a line between them
    img1_keypoints=[]
    img2_keypoints=[]
    for mat in matches:

        # Get the matching keypoints for each of the images
        img1_idx = mat.queryIdx
        img2_idx = mat.trainIdx

        # x - columns
        # y - rows
        (x1,y1) = kp1[img1_idx].pt
        (x2,y2) = kp2[img2_idx].pt
        img1_keypoints.append([y1,x1])
        img2_keypoints.append([y2,x2])

        # Draw a small circle at both co-ordinates
        # radius 4
        # colour blue
        # thickness = 1
        cv2.circle(out, (int(x1),int(y1)), 4, (255, 0, 0), 1)   
        cv2.circle(out, (int(x2)+cols1,int(y2)), 4, (255, 0, 0), 1)

        # Draw a line in between the two points
        # thickness = 1
        # colour blue
        cv2.line(out, (int(x1),int(y1)), (int(x2)+cols1,int(y2)), (255, 0, 0), 1)

    #print img1_keypoints,img2_keypoints
    # Show the image
    cv2.imshow('Matched Features', out)
    cv2.waitKey(0)
    cv2.destroyWindow('Matched Features')

    # Also return the image if you'd like a copy
    return out,img1_keypoints,img2_keypoints

def Fundamental_matrix(img1_keypoints,img2_keypoints):
    print "\n\n"
    print "-------------------Calculating Fundamental Matrix--------------------"
    img1_keypoints=np.array(img1_keypoints)
    img2_keypoints=np.array(img2_keypoints)
    pts1=np.int32(img1_keypoints)
    pts2=np.int32(img2_keypoints)
    temp1=np.array([pts1[0][0]*pts2[0][0],pts1[0][0]*pts2[0][1],pts1[0][0],pts1[0][1]*pts2[0][0],pts1[0][1]*pts2[0][1],pts1[0][1],pts2[0][0],pts2[0][1],1.0])
    temp2=np.array([pts1[1][0]*pts2[1][0],pts1[1][0]*pts2[1][1],pts1[1][0],pts1[1][1]*pts2[1][0],pts1[1][1]*pts2[1][1],pts1[1][1],pts2[1][0],pts2[1][1],1.0])
    temp3=np.array([pts1[2][0]*pts2[2][0],pts1[2][0]*pts2[2][1],pts1[2][0],pts1[2][1]*pts2[2][0],pts1[2][1]*pts2[2][1],pts1[2][1],pts2[2][0],pts2[2][1],1.0])
    temp4=np.array([pts1[3][0]*pts2[3][0],pts1[3][0]*pts2[3][1],pts1[3][0],pts1[3][1]*pts2[3][0],pts1[3][1]*pts2[3][1],pts1[3][1],pts2[3][0],pts2[3][1],1.0])
    temp5=np.array([pts1[4][0]*pts2[4][0],pts1[4][0]*pts2[4][1],pts1[4][0],pts1[4][1]*pts2[4][0],pts1[4][1]*pts2[4][1],pts1[4][1],pts2[4][0],pts2[4][1],1.0])
    temp6=np.array([pts1[5][0]*pts2[5][0],pts1[5][0]*pts2[5][1],pts1[5][0],pts1[5][1]*pts2[5][0],pts1[5][1]*pts2[5][1],pts1[5][1],pts2[5][0],pts2[5][1],1.0])
    temp7=np.array([pts1[6][0]*pts2[6][0],pts1[6][0]*pts2[6][1],pts1[6][0],pts1[6][1]*pts2[6][0],pts1[6][1]*pts2[6][1],pts1[6][1],pts2[6][0],pts2[6][1],1.0])
    temp8=np.array([pts1[7][0]*pts2[7][0],pts1[7][0]*pts2[7][1],pts1[7][0],pts1[7][1]*pts2[7][0],pts1[7][1]*pts2[7][1],pts1[7][1],pts2[7][0],pts2[7][1],1.0])
    A=np.vstack((temp1,temp2,temp3,temp4,temp5,temp6,temp7,temp8))
    U,S,V=np.linalg.svd(A,full_matrices=True)
    #print U.shape,S.shape,V.shape
    #print V[:,-1]
    Fundamental_matrix=np.transpose(V[-1].reshape(3,3))
    U,S,V=np.linalg.svd(Fundamental_matrix,full_matrices=True)
    #print S
    S[-1]=0.0
    S=np.diag(S)
    Fundamental_matrix_final=np.dot(np.dot(U,S),V)
    print ("\n")
    print "Fundamental Matrix is: ",Fundamental_matrix_final
    print "\n"
    print 'Since, It\'s Rank 2 Matrix. I calculated Determinant.'
    
    print "Determinant calculated is: ",np.linalg.det(Fundamental_matrix_final)

    return Fundamental_matrix_final
def Draw_line(img,line):
    #print img.shape[0],img.shape[1]
    x1=0.0
    y1=-line[2][0]/line[1][0]
    x2=img.shape[0]-1

    y2=(-line[2][0]-line[0][0]*x2)/line[1][0]
    #print x1,y1,x2,y2
    cv2.line(img, (int(x1),int(y1)), (int(x2),int(y2)), (200, 255, 180), 1)
    #cv2.imshow('first',img)
    return img



    
def Draw_epipole_lines(F_mat,img1_keypoints,img2_keypoints,img1,img2):
    print "\n\n"
    print "---------------------Calculating Epipole lines and are displayed---------------------"
    img1_keypoints=np.array(img1_keypoints)
    img2_keypoints=np.array(img2_keypoints)
    pts1=np.int32(img1_keypoints)
    pts2=np.int32(img2_keypoints)
    line1_dash=np.dot(F_mat,np.array([pts1[0][0],pts1[0][1],1.0]).reshape(3,1))
    line2_dash=np.dot(F_mat,np.array([pts1[1][0],pts1[1][1],1.0]).reshape(3,1))
    line3_dash=np.dot(F_mat,np.array([pts1[2][0],pts1[2][1],1.0]).reshape(3,1))
    line4_dash=np.dot(F_mat,np.array([pts1[3][0],pts1[3][1],1.0]).reshape(3,1))
    line5_dash=np.dot(F_mat,np.array([pts1[4][0],pts1[4][1],1.0]).reshape(3,1))
    line6_dash=np.dot(F_mat,np.array([pts1[5][0],pts1[5][1],1.0]).reshape(3,1))
    line7_dash=np.dot(F_mat,np.array([pts1[6][0],pts1[6][1],1.0]).reshape(3,1))
    line8_dash=np.dot(F_mat,np.array([pts1[7][0],pts1[7][1],1.0]).reshape(3,1))
    Img1=Draw_line(img2,line1_dash)
    Img2=Draw_line(Img1,line2_dash)
    Img3=Draw_line(Img2,line3_dash)
    Img4=Draw_line(Img3,line4_dash)
    Img5=Draw_line(Img4,line5_dash)
    Img6=Draw_line(Img5,line6_dash)
    Img7=Draw_line(Img6,line7_dash)
    Img8=Draw_line(Img7,line8_dash)

    cv2.imshow('Sunrise Right',Img8)
    cv2.waitKey(0)

    line1=np.dot(np.transpose(F_mat),np.array([pts2[0][0],pts2[0][1],1.0]).reshape(3,1))
    #print line1
    line2=np.dot(np.transpose(F_mat),np.array([pts2[1][0],pts2[1][1],1.0]).reshape(3,1))
    line3=np.dot(np.transpose(F_mat),np.array([pts2[2][0],pts2[2][1],1.0]).reshape(3,1))
    line4=np.dot(np.transpose(F_mat),np.array([pts2[3][0],pts2[3][1],1.0]).reshape(3,1))
    line5=np.dot(np.transpose(F_mat),np.array([pts2[4][0],pts2[4][1],1.0]).reshape(3,1))
    line6=np.dot(np.transpose(F_mat),np.array([pts2[5][0],pts2[5][1],1.0]).reshape(3,1))
    line7=np.dot(np.transpose(F_mat),np.array([pts2[6][0],pts2[6][1],1.0]).reshape(3,1))
    line8=np.dot(np.transpose(F_mat),np.array([pts2[7][0],pts2[7][1],1.0]).reshape(3,1))
    Img1=Draw_line(img1,line1)
    Img2=Draw_line(Img1,line2)
    Img3=Draw_line(Img2,line3)
    Img4=Draw_line(Img3,line4)
    Img5=Draw_line(Img4,line5)
    Img6=Draw_line(Img5,line6)
    Img7=Draw_line(Img6,line7)
    Img8=Draw_line(Img7,line8)
    cv2.imshow('Sunrise Left',Img8)
    cv2.waitKey(0)
    return line1_dash,line2_dash,line1,line2

def Find_epipoles(F_mat,line1_dash,line2_dash,line1,line2):
    print "\n\n"
    print "-------------------------Calculating Epipoles----------------------"
    img1=cv2.imread("Sunrise_Lt.jpg",0)
    img2=cv2.imread("Sunrise_Rt.jpg",0)

    a=np.cross(line1.reshape(3,),line2.reshape(3,))
    #print a.shape
    a=a/a[2]
    print "Epipole using lines of Sunrise_Lt.jpg is:",a[:2]

    b=np.cross(line1_dash.reshape(3,),line2_dash.reshape(3,))
    b=b/b[2]
    print "Epipole using lines of Sunrise_Rt.jpg is:",b[:2]
    cv2.circle(img1, (int(a[0]),int(a[1])), 4, (0, 255, 0), 1)
    cv2.circle(img2, (int(b[0]),int(b[1])), 4, (255, 0, 0), 1)
    cv2.imshow('Sunrise Left from lines',img1)
    cv2.waitKey(0)
    cv2.imshow('Sunrise Right from lines',img2)
    cv2.waitKey(0)
    U,S,V=np.linalg.svd(F_mat,full_matrices=True)
    temp=V[-1]/V[-1][2]
    print "Epipole using Fundamental_matrix of Sunrise_Lt.jpg is : ",temp[:2]
    cv2.circle(img1, (int(temp[0]),int(temp[1])), 4, (0, 255, 0), 1)
    print "Distance between epipoles of Sunrise_Lt.jpg is: ",np.linalg.norm(a-temp)


    cv2.imshow('Sunrise Left using Fundamental matrix',img1)
    cv2.waitKey(0)
    U,S,V=np.linalg.svd(np.transpose(F_mat),full_matrices=True)
    temp=V[-1]/V[-1][2]
    print "Epipole using Fundamental_matrix of Sunrise_Rt.jpg is : ",temp[:2]

    print "Distance between epipoles of Sunrise_Rt.jpg is : ",np.linalg.norm(b-temp)
    cv2.circle(img2, (int(temp[0]),int(temp[1])), 4, (255,0 , 0), 1)
    cv2.imshow('Sunrise Right using  Fundamental matrix',img2)
    cv2.waitKey(0)
    return np.int32(temp)

def Projection_matrix(F_mat,e_dash):
    print "\n\n"
    print "-----------------Calculating Projection matrices---------------"
    P=np.zeros((3,4))
    P[:,:3]=np.identity(3)
    P[:,-1]=0.0
    e_dash=e_dash.reshape(3,1)
    e_dash_x=np.array([[0.0,-e_dash[2][0],e_dash[1][0]],[e_dash[2][0],0.0,e_dash[0][0]],[-e_dash[1][0],e_dash[0][0],0.0]])
    temp=np.dot(e_dash_x,F_mat)
    P_dash=np.zeros((3,4))
    P_dash[:,:3]=temp
    P_dash[:,-1]=e_dash[:,0]
    print "Projection Matrix for Sunrise_Lt.jpg is :",P
    print  "Projection Matrix for Sunrise_Rt.jpg is :",P_dash
    return P,P_dash

def get_3D_coordinates(P,P_dash,img1_keypoints,img2_keypoints):
    print "\n\n"
    print "---------Calculating 3D points for 8 points we had chosen----"
    pts1=np.array(img1_keypoints)
    pts2=np.array(img2_keypoints)
    C_dash_=-np.dot(np.linalg.inv(P_dash[:,:3]),P_dash[:,-1])
    #C_dash_=C_dash_.reshape(3,1)
    C_dash=np.zeros(4,)
    C_dash[:3]=C_dash_
    C_dash[-1]=1.0
    C_dash=C_dash.reshape(4,1)
    C=np.array([0.0,0.0,0.0,1.0]).reshape(4,1)
    Depths=[]
    Co_ordinates=[]
    for i in range(8):
        l=np.dot(np.linalg.pinv(P),np.array([pts1[i][0],pts1[i][1],1.0]).reshape(3,1))-np.dot(np.linalg.pinv(P_dash),np.array([pts2[i][0],pts2[i][1],1.0]).reshape(3,1))
        lambda1=(l[0][0]-l[3][0]*C_dash[0][0])/(C_dash[0][0]-C[0][0])
        X=np.dot(np.linalg.pinv(P),np.array([pts1[i][0],pts1[i][1],1.0]).reshape(3,1))
        Y=np.array([0.0,0.0,0.0,lambda1]).reshape(4,1)
        Z=X+Y
        Z=Z/Z[-1]
        depth=1/(Z[-1]*np.sqrt(P_dash[2,0]**2+P_dash[2,1]**2+P_dash[2,2]**2))
        print "Co_ordinates of point" + str(i+1)+" is: ",Z[:3,0]
        print "Depth of point" + str(i+1)+" is: ",depth[0]
        print "\n"




    
    
    










img1 = cv2.imread('Sunrise_Lt.jpg', 0) # Original image - ensure grayscale
img2 = cv2.imread('Sunrise_Rt.jpg', 0) # Rotated image - ensure grayscale

# Create ORB detector with 1000 keypoints with a scaling pyramid factor
# of 1.2
orb = cv2.ORB(1000, 2.5)

# Detect keypoints of original image
(kp1,des1) = orb.detectAndCompute(img1, None)

# Detect keypoints of rotated image
(kp2,des2) = orb.detectAndCompute(img2, None)

# Create matcher
bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

# Do matching
matches = bf.match(des1,des2)

# Sort the matches based on distance.  Least distance
# is better
matches = sorted(matches, key=lambda val: val.distance)

# Show only the top 10 matches - also save a copy for use later
out,img1_keypoints,img2_keypoints = drawMatches(img1, kp1, img2, kp2, matches[:8])
F_mat=Fundamental_matrix(img1_keypoints,img2_keypoints)

line1_dash,line2_dash,line1,line2=Draw_epipole_lines(F_mat,img1_keypoints,img2_keypoints,img1,img2)
e_dash=Find_epipoles(F_mat,line1_dash,line2_dash,line1,line2)
#print e_dash.shape
P,P_dash=Projection_matrix(F_mat,e_dash)
get_3D_coordinates(P,P_dash,img1_keypoints,img2_keypoints)
















